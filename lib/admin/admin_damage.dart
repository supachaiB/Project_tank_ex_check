import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';

class AdminReportPage extends StatefulWidget {
  @override
  _AdminReportPageState createState() => _AdminReportPageState();
}

class _AdminReportPageState extends State<AdminReportPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î'),
        backgroundColor: Colors.redAccent,
      ),
      body: StreamBuilder<QuerySnapshot>(
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ QuerySnapshot
        stream: FirebaseFirestore.instance
            .collection('firetank_Collection')
            .where('status', isEqualTo: '‡∏ä‡∏≥‡∏£‡∏∏‡∏î')
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return const Center(child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
          }
          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return const Center(child: Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∏‡∏î'));
          }

          final damagedExtinguishers = snapshot.data!.docs;

          return ListView.builder(
            itemCount: damagedExtinguishers.length,
            itemBuilder: (context, index) {
              var data =
                  damagedExtinguishers[index].data() as Map<String, dynamic>;

              return Card(
                margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                child: ListTile(
                  title: Text('‡∏ñ‡∏±‡∏á #${data['tank_id']} ',
                      style: const TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'üìç ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£: ${data['building']} ‡∏ä‡∏±‡πâ‡∏ô ${data['floor']}',
                      ),
                      StreamBuilder<QuerySnapshot>(
                        stream: FirebaseFirestore.instance
                            .collection('form_checks')
                            .where('tank_id', isEqualTo: data['tank_id'])
                            .limit(1)
                            .snapshots(),
                        builder: (context, formSnapshot) {
                          if (formSnapshot.connectionState ==
                              ConnectionState.waiting) {
                            return const CircularProgressIndicator();
                          }
                          if (formSnapshot.hasError) {
                            return const Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                          }
                          if (!formSnapshot.hasData ||
                              formSnapshot.data!.docs.isEmpty) {
                            return const Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
                          }

                          var formData = formSnapshot.data!.docs.first.data()
                              as Map<String, dynamic>;

                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('üîß ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ñ‡∏±‡∏á: ${data['type']}'),
                              Text('üîß ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∏‡∏î : ${data['type']}'),
                              Text(
                                  'üí¨ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${formData['remarks'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}'),
                              Text(
                                  'üìÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${_formatDate(formData['date_checked'])}'),
                              // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å field 'equipment_status'
                              Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Text(
                                      'üìù ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${formData['inspector']}'),
                                  ElevatedButton(
                                    onPressed: () {
                                      _assignTechnician(data);
                                    },
                                    child: const Text(
                                      '‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡∏´‡∏≤‡∏ä‡πà‡∏≤‡∏á',
                                      style: TextStyle(color: Colors.white),
                                    ),
                                    style: ElevatedButton.styleFrom(
                                        backgroundColor: Colors.redAccent),
                                  ),
                                ],
                              ),
                            ],
                          );
                        },
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }

  String _formatDate(dynamic date) {
    if (date is Timestamp) {
      return DateFormat('yyyy-MM-dd').format(date.toDate());
    } else if (date is String) {
      try {
        return DateFormat('yyyy-MM-dd').format(DateTime.parse(date));
      } catch (e) {
        return '-';
      }
    }
    return '-';
  }

  void _assignTechnician(Map<String, dynamic> data) {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÉ‡∏ô Firestore ‡πÉ‡∏ô collection ‡πÉ‡∏´‡∏°‡πà 'technician_requests'
    FirebaseFirestore.instance
        .collection('technician_requests')
        .doc(data['tank_id']) // ‡πÉ‡∏ä‡πâ tank_id ‡πÄ‡∏õ‡πá‡∏ô doc ID
        .set({
      'tank_id': data['tank_id'],
      'building': data['building'],
      'floor': data['floor'],
      'type': data['type'],
      'remarks': data['remarks'],
      'status': '‡πÑ‡∏°‡πà‡∏õ‡∏Å‡∏ï‡∏¥',
      'inspector': data['inspector'],
      'timestamp': FieldValue.serverTimestamp(), // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
    }).then((_) {
      // ‡πÅ‡∏™‡∏î‡∏á Snackbar ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              '‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô,‡∏ã‡πà‡∏≠‡∏° ‡∏à‡∏≤‡∏Å ‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏á ${data['tank_id']}'),
        ),
      );
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á
      setState(() {});
    }).catchError((error) {
      // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏™‡∏î‡∏á Snackbar
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error'),
        ),
      );
    });
  }
}
